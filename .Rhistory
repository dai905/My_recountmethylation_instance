unmeth <- HDF5Array::HDF5Array(dbn, "unmeth")
cn <- rhdf5::h5read(dbn, "colnames");rn <- rhdf5::h5read(dbn, "rownames")
rownames(meth) <- rownames(unmeth) <- as.character(rn)
colnames(meth) <- colnames(unmeth) <- as.character(cn)
gr <- gr[order(match(names(gr), rownames(meth)))]
icond <- identical(rownames(meth), names(gr))
if(!icond){stop("Problem matching gr names to h5 meth rows")}
icond <- identical(rownames(unmeth), names(gr))
if(!icond){stop("Problem matching gr names to h5 unmeth rows")}
if(add.metadata & !is.null(pdata)){
icond <- identical(colnames(meth), rownames(pdata))
if(!icond){stop("Problem matching pdata rows to h5 meth cols")}
icond <- identical(colnames(unmeth), rownames(pdata))
if(!icond){stop("Problem matching pdata rows to h5 unmeth cols")}
};if(verbose){message("Defining new SummarizedExperiment object...")}
gm <- minfi::GenomicMethylSet(gr = gr, Meth = meth, Unmeth = unmeth,
annotation = anno);S4Vectors::metadata(gm) <- semd
if(add.metadata & !is.null(pdata)){message("Adding metadata...")
if(is.character(pdata)){pdata <- get(load(pdata))};pData(gm) <- pdata}
message("Writing data to new h5se object. This may take awhile.")
HDF5Array::saveHDF5SummarizedExperiment(gm, dir = h5se.fpath,
replace = replaceopt)
message("Finished writing data to h5se gm: ", h5se.fpath); return(NULL)
}
comp.dpath <- file.path(files.dpath, comp.dname)
if(!dir.exists(comp.dpath)){stop("Error, didn't find compilations dir ", comp.dpath)}
message("Handling metadata options...")
md <- rmp_handle_metadata(); if(is.null(md)){stop("Couldn't get metadata...")}
version <- md[["version"]]; ts <- md[["timestamp"]]
message("Getting platform info..."); accinfo <- rmp_handle_platform()
message("Checking for valid HDF5 MethylSet ('gm') database file...")
vform <- gsub("\\.", "-", version);lfv <- list.files(comp.dpath)
lfv <- lfv[grepl(vform, lfv) & grepl(ts, lfv)] # filter on instance metadata
lfv <- lfv[grepl(".*gm.*", lfv) & grepl(".*\\.h5$", lfv)];
if(length(lfv) == 0){
stop("Couldn't find HDF5 gm database file at: ", comp.dpath, ".\n",
"Try running rule `get_h5_gm` first.")
} else{message("Using HDF5 gm file: ", lfv[1])}
dbn.dpath <- file.path(comp.dpath, lfv[1])
message("Making h5se gm database file...")
make_h5_gm(dbn = dbn.dpath, version = version, ts = ts,
blocksize = ngsm.block, platform = platform)
setwd("~/Documents/GitHub/recountmethylation_instance")
dbn.dpath
file.exists(v)
file.exists(dbn.dpath)
make_h5se_gm <- function(dbn, version, ts, platform = c("hm450k", "epic"),
comp.dpath = file.path("recount-methylation-files", "compilations"),
replaceopt = TRUE, verbose = TRUE, add.metadata = FALSE, pdata = NULL,
semd=list("title"="GenomicMethylSet HDF5-SummarizedExperiment object",
"preprocessing"="raw"), newdnstem = "remethdb"){
newfn <- paste(newdnstem, platform, "h5se", "gm",
gsub("\\.", "-", version), ts, sep="_")
h5se.fpath <- file.path(comp.dpath, newfn)
if(!file.exists(h5se.fpath)){stop("Couldn't find h5 gm file: ", h5se.fpath)}
if(verbose){message("Making new H5SE database: ", h5se.fpath)}
if(verbose){message("Getting granges from minfiData...")}
if(platform == "hm450k"){require(minfiData)
ms <- minfi::mapToGenome(get(data("MsetEx")))
} else if(platform == "epic"){require(minfiDataEPIC)
ms <- minfi::mapToGenome(get(data("MsetEPIC")))
} else{stop("Error, didn't recognize platform.")}
anno <- minfi::annotation(ms);gr <- GenomicRanges::granges(ms)
message("Reading datasets.")
meth <- HDF5Array::HDF5Array(dbn, "meth")
unmeth <- HDF5Array::HDF5Array(dbn, "unmeth")
cn <- rhdf5::h5read(dbn, "colnames");rn <- rhdf5::h5read(dbn, "rownames")
rownames(meth) <- rownames(unmeth) <- as.character(rn)
colnames(meth) <- colnames(unmeth) <- as.character(cn)
gr <- gr[order(match(names(gr), rownames(meth)))]
icond <- identical(rownames(meth), names(gr))
if(!icond){stop("Problem matching gr names to h5 meth rows")}
icond <- identical(rownames(unmeth), names(gr))
if(!icond){stop("Problem matching gr names to h5 unmeth rows")}
if(add.metadata & !is.null(pdata)){
icond <- identical(colnames(meth), rownames(pdata))
if(!icond){stop("Problem matching pdata rows to h5 meth cols")}
icond <- identical(colnames(unmeth), rownames(pdata))
if(!icond){stop("Problem matching pdata rows to h5 unmeth cols")}
};if(verbose){message("Defining new SummarizedExperiment object...")}
gm <- minfi::GenomicMethylSet(gr = gr, Meth = meth, Unmeth = unmeth,
annotation = anno);S4Vectors::metadata(gm) <- semd
if(add.metadata & !is.null(pdata)){message("Adding metadata...")
if(is.character(pdata)){pdata <- get(load(pdata))};pData(gm) <- pdata}
message("Writing data to new h5se object. This may take awhile.")
HDF5Array::saveHDF5SummarizedExperiment(gm, dir = h5se.fpath,
replace = replaceopt)
message("Finished writing data to h5se gm: ", h5se.fpath); return(NULL)
}
comp.dpath <- file.path(files.dpath, comp.dname)
if(!dir.exists(comp.dpath)){stop("Error, didn't find compilations dir ", comp.dpath)}
message("Handling metadata options...")
md <- rmp_handle_metadata(); if(is.null(md)){stop("Couldn't get metadata...")}
version <- md[["version"]]; ts <- md[["timestamp"]]
message("Getting platform info..."); accinfo <- rmp_handle_platform()
message("Checking for valid HDF5 MethylSet ('gm') database file...")
vform <- gsub("\\.", "-", version);lfv <- list.files(comp.dpath)
lfv <- lfv[grepl(vform, lfv) & grepl(ts, lfv)] # filter on instance metadata
lfv <- lfv[grepl(".*gm.*", lfv) & grepl(".*\\.h5$", lfv)];
if(length(lfv) == 0){
stop("Couldn't find HDF5 gm database file at: ", comp.dpath, ".\n",
"Try running rule `get_h5_gm` first.")
} else{message("Using HDF5 gm file: ", lfv[1])}
dbn.dpath <- file.path(comp.dpath, lfv[1])
message("Making h5se gm database file...")
make_h5_gm(dbn = dbn.dpath, version = version, ts = ts,
blocksize = ngsm.block, platform = platform)
make_h5se_gm(dbn = dbn.dpath, version = version, ts = ts,
blocksize = ngsm.block, platform = platform)
comp.dpath <- file.path(files.dpath, comp.dname)
if(!dir.exists(comp.dpath)){stop("Error, didn't find compilations dir ",
comp.dpath)}
message("Handling metadata options...");md <- rmp_handle_metadata()
if(is.null(md)){stop("Couldn't get metadata...")}
version <- md[["version"]]; ts <- md[["timestamp"]]
message("Getting platform info..."); accinfo <- rmp_handle_platform()
message("Checking for valid HDF5 MethylSet ('gm') database file...")
vform <- gsub("\\.", "-", version);lfv <- list.files(comp.dpath)
lfv <- lfv[grepl(vform, lfv) & grepl(ts, lfv)] # filter on instance metadata
lfv <- lfv[grepl(".*gm.*", lfv) & grepl(".*\\.h5$", lfv)];
if(length(lfv) == 0){
stop("Couldn't find HDF5 gm database file at: ", comp.dpath, ".\n",
"Try running rule `get_h5_gm` first.")
} else{message("Using HDF5 gm file: ", lfv[1])}
dbn.dpath <- file.path(comp.dpath, lfv[1])
message("Making h5se gm database file...")
make_h5se_gm(dbn = dbn.dpath, version = version, ts = ts, platform=platform)
make_h5se_gm <- function(dbn, version, ts, platform = c("hm450k", "epic"),
comp.dpath = file.path("recount-methylation-files", "compilations"),
replaceopt = TRUE, verbose = TRUE, add.metadata = FALSE, pdata = NULL,
semd=list("title"="GenomicMethylSet HDF5-SummarizedExperiment object",
"preprocessing"="raw"), newdnstem = "remethdb"){
if(!file.exists(dbn)){stop("Couldn't find h5 gm file: ", dbn)}
newfn <- paste(newdnstem, platform, "h5se", "gm",
gsub("\\.", "-", version), ts, sep="_")
h5se.fpath <- file.path(comp.dpath, newfn)
if(verbose){message("Making new H5SE database: ", h5se.fpath)}
if(verbose){message("Getting granges from minfiData...")}
if(platform == "hm450k"){require(minfiData)
ms <- minfi::mapToGenome(get(data("MsetEx")))
} else if(platform == "epic"){require(minfiDataEPIC)
ms <- minfi::mapToGenome(get(data("MsetEPIC")))
} else{stop("Error, didn't recognize platform.")}
anno <- minfi::annotation(ms);gr <- GenomicRanges::granges(ms)
message("Reading datasets.")
meth <- HDF5Array::HDF5Array(dbn, "meth")
unmeth <- HDF5Array::HDF5Array(dbn, "unmeth")
cn <- rhdf5::h5read(dbn, "colnames");rn <- rhdf5::h5read(dbn, "rownames")
rownames(meth) <- rownames(unmeth) <- as.character(rn)
colnames(meth) <- colnames(unmeth) <- as.character(cn)
gr <- gr[order(match(names(gr), rownames(meth)))]
icond <- identical(rownames(meth), names(gr))
if(!icond){stop("Problem matching gr names to h5 meth rows")}
icond <- identical(rownames(unmeth), names(gr))
if(!icond){stop("Problem matching gr names to h5 unmeth rows")}
if(add.metadata & !is.null(pdata)){
icond <- identical(colnames(meth), rownames(pdata))
if(!icond){stop("Problem matching pdata rows to h5 meth cols")}
icond <- identical(colnames(unmeth), rownames(pdata))
if(!icond){stop("Problem matching pdata rows to h5 unmeth cols")}
};if(verbose){message("Defining new SummarizedExperiment object...")}
gm <- minfi::GenomicMethylSet(gr = gr, Meth = meth, Unmeth = unmeth,
annotation = anno);S4Vectors::metadata(gm) <- semd
if(add.metadata & !is.null(pdata)){message("Adding metadata...")
if(is.character(pdata)){pdata <- get(load(pdata))};pData(gm) <- pdata}
message("Writing data to new h5se object. This may take awhile.")
HDF5Array::saveHDF5SummarizedExperiment(gm, dir = h5se.fpath,
replace = replaceopt)
message("Finished writing data to h5se gm: ", h5se.fpath); return(NULL)
}
comp.dpath <- file.path(files.dpath, comp.dname)
if(!dir.exists(comp.dpath)){stop("Error, didn't find compilations dir ",
comp.dpath)}
message("Handling metadata options...");md <- rmp_handle_metadata()
if(is.null(md)){stop("Couldn't get metadata...")}
version <- md[["version"]]; ts <- md[["timestamp"]]
message("Getting platform info..."); accinfo <- rmp_handle_platform()
message("Checking for valid HDF5 MethylSet ('gm') database file...")
vform <- gsub("\\.", "-", version);lfv <- list.files(comp.dpath)
lfv <- lfv[grepl(vform, lfv) & grepl(ts, lfv)] # filter on instance metadata
lfv <- lfv[grepl(".*gm.*", lfv) & grepl(".*\\.h5$", lfv)];
if(length(lfv) == 0){
stop("Couldn't find HDF5 gm database file at: ", comp.dpath, ".\n",
"Try running rule `get_h5_gm` first.")
} else{message("Using HDF5 gm file: ", lfv[1])}
dbn.dpath <- file.path(comp.dpath, lfv[1])
message("Making h5se gm database file...")
make_h5se_gm(dbn = dbn.dpath, version = version, ts = ts, platform=platform)
if(platform == "hm450k"){num.assays = 485512
require(minfiData);rgex <- get(data("RGsetEx"))
} else if(platform == "epic"){num.assays = 866836
require(minfiDataEPIC);rgex <- get(data("RGsetEPIC"))
} else{stop("Error, didn't recognize platform.")}
message("Checking for h5se RGChannelSet database file...")
vform <- gsub("\\.", "-", version);lfv <- list.files(comp.dpath)
lfv <- lfv[grepl(vform, lfv) & grepl(ts, lfv)]
lfv <- lfv[grepl(".*h5se_rg.*", lfv)]
if(length(lfv) == 0){
stop("Couldn't find HDF5 rg database file at: ", comp.dpath, ".\n",
"Try running rule `get_h5se_rg` first.")
} else{message("Using HDF5 rg file: ", lfv[1])}
dbn.dpath <- file.path(comp.dpath, lfv[1])
dbn.dpath
dbn = dbn.dpath
grex <- preprocessNoob(rgex);rg<-HDF5Array::loadHDF5SummarizedExperiment(dbn)
h5dbn <- paste(newfnstem, platform, "h5", "gr",
gsub("\\.", "-", version), ts, sep = "_")
message("Making h5 db: ", h5dbn)
make_h5_gr <- function(dbn, version, ts, num.samp, blocksize = 65,verbose=TRUE,
comp.dpath = file.path("recount-methylation-files", "compilations"),
platform=c("hm450k","epic"),newfnstem="remethdb",replace.opt=TRUE){
if(platform == "hm450k"){num.assays = 485512
require(minfiData);rgex <- get(data("RGsetEx"))
} else if(platform == "epic"){num.assays = 866836
require(minfiDataEPIC);rgex <- get(data("RGsetEPIC"))
} else{stop("Error, didn't recognize platform.")}
grex <- preprocessNoob(rgex);rg<-HDF5Array::loadHDF5SummarizedExperiment(dbn)
h5dbn <- paste(newfnstem, platform, "h5", "gr",
gsub("\\.", "-", version), paste0(ts, ".h5"), sep = "_")
h5.fpath <- file.path(comp.dpath, h5dbn);message("Making h5 db: ", h5.fpath)
if(!file.exists(h5dbn)){rhdf5::h5createFile(h5.fpath)}
if(verbose){message("Making main noobbeta data table...")}
rhdf5::h5createDataset(h5.fpath, "noobbeta", dims = list(num.assays, num.samp),
maxdims = c(rhdf5::H5Sunlimited(), rhdf5::H5Sunlimited()),
storage.mode = "double", level = 5, chunk = c(1000, 50))
if(verbose){message("Making colnames data table...")}
rhdf5::h5createDataset(h5.fpath, "colnames", dims = list(num.samp),
maxdims = c(rhdf5::H5Sunlimited()), storage.mode = "character", size = 256,
level = 5, chunk = c(1000))
if(verbose){message("Making, writing rownames data table...")}
rhdf5::h5createDataset(h5.fpath, "rownames", dims = list(num.assays),
maxdims = c(rhdf5::H5Sunlimited()), storage.mode = "character", size = 256,
level = 5, chunk = c(1000))
rhdf5::h5write(rownames(grex),file=h5.fpath,name="rownames",
index=list(1:num.assays)); blocks <- getblocks(ncol(rg), bsize = blocksize)
message("Writing data...");t1<-Sys.time();row.indices<-seq(rownames(grex))
for(b in 1:length(blocks)){cindices <- blocks[[b]];
if(verbose){message("Beginning block ", b, "/", length(blocks), "...")}
lindex <- list(row.indices, cindices);rgi <- rg[,cindices]
tryCatch(gr <- minfi::preprocessNoob(rgi),
error = function(e){
message("Error with preprocessNoob, trying samples in block...")
for(si in seq(length(cindices))){
message("Attempting to write data for sample ", si, "...")
lindex <- list(row.indices, cindices[si])
tryCatch(gr <- minfi::preprocessNoob(rgi[,si]),
error = function(e){message("Error at ",si,
", skipping...")})
if(class(gr) == "MethylSet"){
nbeta <- as.matrix(minfi::getBeta(gr))
class(nbeta)<-"numeric"
rhdf5::h5write(nbeta,file=h5dbn,name="noobbeta",
index=lindex)
message("Wrote data for sample ", si, ", continuing...")
}
}
}
)
if(class(gr) == "MethylSet"){
nbeta <- as.matrix(minfi::getBeta(gr));class(nbeta) <- "numeric"
rhdf5::h5write(nbeta, file=h5.fpath, name="noobbeta", index=lindex)}
if(verbose){message("Finished block ", b, "/", length(blocks),
", time = ", Sys.time() - t1)}
};message("Finished writing h5 gr data: ", h5.fpath); return(h5.fpath)
}
comp.dpath <- file.path(files.dpath, comp.dname)
if(!dir.exists(comp.dpath)){
stop("Error, didn't find compilations dir ", comp.dpath)}
message("Handling metadata options...")
md <- rmp_handle_metadata(); if(is.null(md)){
stop("Couldn't get metadata...")}
version <- md[["version"]]; ts <- md[["timestamp"]]
message("Getting platform info..."); accinfo <- rmp_handle_platform()
message("Checking for h5se RGChannelSet database file...")
vform <- gsub("\\.", "-", version);lfv <- list.files(comp.dpath)
lfv <- lfv[grepl(vform, lfv) & grepl(ts, lfv)]
lfv <- lfv[grepl(".*h5se_rg.*", lfv)]
if(length(lfv) == 0){
stop("Couldn't find HDF5 rg database file at: ", comp.dpath, ".\n",
"Try running rule `get_h5se_rg` first.")
} else{message("Using HDF5 rg file: ", lfv[1])}
dbn.dpath <- file.path(comp.dpath, lfv[1])
message("Making HDF5 gr database file from h5se RGChannelSet...")
make_h5_gr(dbn = dbn.dpath, version = version, ts = ts,
blocksize = ngsm.block, platform = platform)
make_h5_gr <- function(dbn, version, ts, blocksize = 65,verbose=TRUE,
comp.dpath = file.path("recount-methylation-files", "compilations"),
platform=c("hm450k","epic"),newfnstem="remethdb",replace.opt=TRUE){
if(platform == "hm450k"){num.assays = 485512
require(minfiData);rgex <- get(data("RGsetEx"))
} else if(platform == "epic"){num.assays = 866836
require(minfiDataEPIC);rgex <- get(data("RGsetEPIC"))
} else{stop("Error, didn't recognize platform.")}
grex <- preprocessNoob(rgex)
rg<-HDF5Array::loadHDF5SummarizedExperiment(dbn);num.samp <- ncol(rg)
h5dbn <- paste(newfnstem, platform, "h5", "gr",
gsub("\\.", "-", version), paste0(ts, ".h5"), sep = "_")
h5.fpath <- file.path(comp.dpath, h5dbn);message("Making h5 db: ", h5.fpath)
if(!file.exists(h5dbn)){rhdf5::h5createFile(h5.fpath)}
if(verbose){message("Making main noobbeta data table...")}
rhdf5::h5createDataset(h5.fpath, "noobbeta", dims = list(num.assays, num.samp),
maxdims = c(rhdf5::H5Sunlimited(), rhdf5::H5Sunlimited()),
storage.mode = "double", level = 5, chunk = c(1000, 50))
if(verbose){message("Making colnames data table...")}
rhdf5::h5createDataset(h5.fpath, "colnames", dims = list(num.samp),
maxdims = c(rhdf5::H5Sunlimited()), storage.mode = "character", size = 256,
level = 5, chunk = c(1000))
if(verbose){message("Making, writing rownames data table...")}
rhdf5::h5createDataset(h5.fpath, "rownames", dims = list(num.assays),
maxdims = c(rhdf5::H5Sunlimited()), storage.mode = "character", size = 256,
level = 5, chunk = c(1000))
rhdf5::h5write(rownames(grex),file=h5.fpath,name="rownames",
index=list(1:num.assays)); blocks <- getblocks(ncol(rg), bsize = blocksize)
message("Writing data...");t1<-Sys.time();row.indices<-seq(rownames(grex))
for(b in 1:length(blocks)){cindices <- blocks[[b]];
if(verbose){message("Beginning block ", b, "/", length(blocks), "...")}
lindex <- list(row.indices, cindices);rgi <- rg[,cindices]
tryCatch(gr <- minfi::preprocessNoob(rgi),
error = function(e){
message("Error with preprocessNoob, trying samples in block...")
for(si in seq(length(cindices))){
message("Attempting to write data for sample ", si, "...")
lindex <- list(row.indices, cindices[si])
tryCatch(gr <- minfi::preprocessNoob(rgi[,si]),
error = function(e){message("Error at ",si,
", skipping...")})
if(class(gr) == "MethylSet"){
nbeta <- as.matrix(minfi::getBeta(gr))
class(nbeta)<-"numeric"
rhdf5::h5write(nbeta,file=h5dbn,name="noobbeta",
index=lindex)
message("Wrote data for sample ", si, ", continuing...")
}
}
}
)
if(class(gr) == "MethylSet"){
nbeta <- as.matrix(minfi::getBeta(gr));class(nbeta) <- "numeric"
rhdf5::h5write(nbeta, file=h5.fpath, name="noobbeta", index=lindex)}
if(verbose){message("Finished block ", b, "/", length(blocks),
", time = ", Sys.time() - t1)}
};message("Finished writing h5 gr data: ", h5.fpath); return(h5.fpath)
}
make_h5_gr(dbn = dbn.dpath, version = version, ts = ts,
blocksize = ngsm.block, platform = platform)
replace.opt=TRUE
newfnstem="remethdb"
if(platform == "hm450k"){num.assays = 485512
require(minfiData);rgex <- get(data("RGsetEx"))
} else if(platform == "epic"){num.assays = 866836
require(minfiDataEPIC);rgex <- get(data("RGsetEPIC"))
} else{stop("Error, didn't recognize platform.")}
grex <- preprocessNoob(rgex)
rg<-HDF5Array::loadHDF5SummarizedExperiment(dbn);num.samp <- ncol(rg)
h5dbn <- paste(newfnstem, platform, "h5", "gr",
gsub("\\.", "-", version), paste0(ts, ".h5"), sep = "_")
h5.fpath <- file.path(comp.dpath, h5dbn);message("Making h5 db: ", h5.fpath)
if(!file.exists(h5dbn)){rhdf5::h5createFile(h5.fpath)}
rhdf5::h5createDataset(h5.fpath, "noobbeta", dims = list(num.assays, num.samp),
maxdims = c(rhdf5::H5Sunlimited(), rhdf5::H5Sunlimited()),
storage.mode = "double", level = 5, chunk = c(1000, 50))
rhdf5::h5createDataset(h5.fpath, "colnames", dims = list(num.samp),
maxdims = c(rhdf5::H5Sunlimited()), storage.mode = "character", size = 256,
level = 5, chunk = c(1000))
?h5createDataset
?h5createFile
rhdf5::h5createDataset(h5.fpath, "rownames", dims = list(num.assays),
maxdims = c(rhdf5::H5Sunlimited()), storage.mode = "character", size = 256,
level = 5, chunk = c(1000))
rhdf5::h5write(rownames(grex),file=h5.fpath,name="rownames",
index=list(1:num.assays)); blocks <- getblocks(ncol(rg), bsize = blocksize)
message("Writing data...");t1<-Sys.time();row.indices<-seq(rownames(grex))
b
b = 1
cindices <- blocks[[b]];
if(verbose){message("Beginning block ", b, "/", length(blocks), "...")}
lindex <- list(row.indices, cindices);rgi <- rg[,cindices]
dim(rgi)
gr <- minfi::preprocessNoob(rgi),
gr <- minfi::preprocessNoob(rgi)
class(rgi)
class(getBeta(rgi))
rgi.da <- rg[,cindices]
annotation(rgi.da)
rgi.grn <- as.matrix(minfi::getGreen(rgi.da))
rgi.red <- as.matrix(minfi::getRed(rgi.da))
rgi <- minfi::RGChannelSet(Green = rgi.grn, Red = rgi.red,
annotation = annotation(rgi.da))
gr <- minfi::preprocessNoob(rgi)
dim9rg
dim(rg)
class(gr)
dim(gr)
make_h5_gr <- function(dbn, version, ts, blocksize = 65,verbose=TRUE,
comp.dpath = file.path("recount-methylation-files", "compilations"),
platform=c("hm450k","epic"),newfnstem="remethdb",replace.opt=TRUE){
if(!file.exists(dbn)){stop("Couldn't find file: ", dbn)}
if(platform == "hm450k"){num.assays = 485512
require(minfiData);rgex <- get(data("RGsetEx"))
} else if(platform == "epic"){num.assays = 866836
require(minfiDataEPIC);rgex <- get(data("RGsetEPIC"))
} else{stop("Error, didn't recognize platform.")}
grex <- preprocessNoob(rgex)
rg<-HDF5Array::loadHDF5SummarizedExperiment(dbn);num.samp <- ncol(rg)
h5dbn <- paste(newfnstem, platform, "h5", "gr",
gsub("\\.", "-", version), paste0(ts, ".h5"), sep = "_")
h5.fpath <- file.path(comp.dpath, h5dbn);message("Making h5 db: ", h5.fpath)
if(!file.exists(h5.fpath)){rhdf5::h5createFile(h5.fpath)}
if(verbose){message("Making main noobbeta data table...")}
rhdf5::h5createDataset(h5.fpath, "noobbeta", dims = list(num.assays, num.samp),
maxdims = c(rhdf5::H5Sunlimited(), rhdf5::H5Sunlimited()),
storage.mode = "double", level = 5, chunk = c(1000, 50))
if(verbose){message("Making colnames data table...")}
rhdf5::h5createDataset(h5.fpath, "colnames", dims = list(num.samp),
maxdims = c(rhdf5::H5Sunlimited()), storage.mode = "character", size = 256,
level = 5, chunk = c(1000))
if(verbose){message("Writing the rownames data table...")}
rhdf5::h5createDataset(h5.fpath, "rownames", dims = list(num.assays),
maxdims = c(rhdf5::H5Sunlimited()), storage.mode = "character", size = 256,
level = 5, chunk = c(1000))
rhdf5::h5write(rownames(grex),file=h5.fpath,name="rownames",
index=list(1:num.assays)); blocks <- getblocks(ncol(rg), bsize = blocksize)
message("Writing data...");t1<-Sys.time();row.indices<-seq(rownames(grex))
for(b in 1:length(blocks)){cindices <- blocks[[b]];
if(verbose){message("Beginning block ", b, "/", length(blocks), "...")}
lindex <- list(row.indices, cindices);rgi.da <- rg[,cindices]
# remake rgi without DelayedArray matrices
rgi.grn <- as.matrix(minfi::getGreen(rgi.da))
rgi.red <- as.matrix(minfi::getRed(rgi.da))
rgi <- minfi::RGChannelSet(Green = rgi.grn, Red = rgi.red,
annotation = annotation(rgi.da))
gr <- minfi::preprocessNoob(rgi)
nbeta <- as.matrix(minfi::getBeta(gr));class(nbeta) <- "numeric"
rhdf5::h5write(nbeta, file=h5.fpath, name="noobbeta", index=lindex)
if(verbose){message("Finished block ", b, "/", length(blocks),
", time = ", Sys.time() - t1)}
};message("Finished writing h5 gr data: ", h5.fpath); return(h5.fpath)
}
make_h5_gr(dbn = dbn.dpath, version = version, ts = ts,
blocksize = ngsm.block, platform = platform)
comp.dpath <- file.path(files.dpath, comp.dname)
if(!dir.exists(comp.dpath)){stop("Error, didn't find compilations dir ",
comp.dpath)}
message("Handling metadata options...");md <- rmp_handle_metadata()
if(is.null(md)){stop("Couldn't get metadata...")}
version <- md[["version"]]; ts <- md[["timestamp"]]
message("Getting platform info..."); accinfo <- rmp_handle_platform()
message("Checking for valid HDF5 `gr` set database file...")
vform <- gsub("\\.", "-", version);lfv <- list.files(comp.dpath)
lfv <- lfv[grepl(vform, lfv) & grepl(ts, lfv)] # filter on instance metadata
lfv <- lfv[grepl(".*gr.*", lfv) & grepl(".*\\.h5$", lfv)];
if(length(lfv) == 0){
stop("Couldn't find HDF5 gr database file at: ", comp.dpath, ".\n",
"Try running rule `get_h5_gr` first.")
} else{message("Using HDF5 gr file: ", lfv[1])}
dbn.dpath <- file.path(comp.dpath, lfv[1])
message("Making h5se gr database file...")
dbn.dpath
semd=list("title"="GenomicMethylSet HDF5-SummarizedExperiment object",
"preprocessing"="Normalization with out-of-band signal (noob)")
make_h5se_gr <- function(dbn, version, ts, platform = c("hm450k", "epic"),
comp.dpath = file.path("recount-methylation-files", "compilations"),
replaceopt = TRUE, verbose = TRUE, add.metadata = FALSE, pdata = NULL,
newdnstem = "remethdb",
semd=list("title"="GenomicMethylSet HDF5-SummarizedExperiment object",
"preprocessing"="Normalization with out-of-band signal (noob)")){
if(!file.exists(dbn)){stop("Couldn't find h5 gr file ", dbn)}
newfn <- paste(newdnstem, platform, "h5se", "gr",
gsub("\\.", "-", version), ts, sep = "_")
h5se.fpath <- file.path(comp.dpath, newfn)
if(verbose){message("Making new H5SE gr database: ", h5se.fpath)}
if(platform == "hm450k"){require(minfiData)
ms <- minfi::mapToGenome(get(data("MsetEx")))
} else if(platform == "epic"){require(minfiDataEPIC)
ms <- minfi::mapToGenome(get(data("MsetEPIC")))
} else{stop("Error, didn't recognize platform.")}
anno <- minfi::annotation(ms);gr <- GenomicRanges::granges(ms)
message("Reading datasets.");nbeta <- HDF5Array::HDF5Array(dbn, "noobbeta")
cn<-rhdf5::h5read(dbn,"colnames");rn<-rhdf5::h5read(dbn,"rownames")
rownames(nbeta) <- as.character(rn);colnames(nbeta) <- as.character(cn)
gr <- gr[order(match(names(gr), rownames(nbeta)))]
icond <- identical(rownames(nbeta), names(gr))
if(!icond){stop("Problem matching gr names to h5 nbeta rows")}
gmi <- minfi::GenomicRatioSet(gr = gr, Beta = nbeta[,c(1:num.samp)],
annotation = anno);S4Vectors::metadata(gmi) <- semd # H5SE object metadata
if(add.metadata & !is.null(pdata)){message("Checking and adding metadata...")
icond <- identical(colnames(nbeta), rownames(pdata))
if(!icond){stop("Problem matching pdata rows to h5 nbeta cols")}
if(is.character(pdata)){pdata <- get(load(pdata))};pData(gmi) <- pdata
};message("Writing new data to h5se object. This may take awhile.")
HDF5Array::saveHDF5SummarizedExperiment(gmi, dir = h5se.fpath,
replace = replaceopt)
message("Finished writing h5se gr data: ", h5se.fpath);return(NULL)
}
comp.dpath <- file.path(files.dpath, comp.dname)
if(!dir.exists(comp.dpath)){stop("Error, didn't find compilations dir ",
comp.dpath)}
message("Handling metadata options...");md <- rmp_handle_metadata()
if(is.null(md)){stop("Couldn't get metadata...")}
version <- md[["version"]]; ts <- md[["timestamp"]]
message("Getting platform info..."); accinfo <- rmp_handle_platform()
message("Checking for valid HDF5 `gr` set database file...")
vform <- gsub("\\.", "-", version);lfv <- list.files(comp.dpath)
lfv <- lfv[grepl(vform, lfv) & grepl(ts, lfv)] # filter on instance metadata
lfv <- lfv[grepl(".*gr.*", lfv) & grepl(".*\\.h5$", lfv)];
if(length(lfv) == 0){
stop("Couldn't find HDF5 gr database file at: ", comp.dpath, ".\n",
"Try running rule `get_h5_gr` first.")
} else{message("Using HDF5 gr file: ", lfv[1])}
dbn.dpath <- file.path(comp.dpath, lfv[1])
message("Making h5se gr database file...")
make_h5se_gr(dbn = dbn.dpath, version = version, ts = ts, platform=platform)
